package com.cqupt.personal.app.Fragment;import android.content.Intent;import android.os.Bundle;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.Fragment;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.util.Log;import android.view.Display;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.view.Window;import android.view.WindowManager;import android.widget.ImageView;import android.widget.RelativeLayout;import com.avos.avoscloud.AVException;import com.avos.avoscloud.AVLiveQuery;import com.avos.avoscloud.AVLiveQueryEventHandler;import com.avos.avoscloud.AVLiveQuerySubscribeCallback;import com.avos.avoscloud.AVObject;import com.avos.avoscloud.AVQuery;import com.avos.avoscloud.AVUser;import com.avos.avoscloud.FindCallback;import com.avos.avoscloud.SaveCallback;import com.cqupt.personal.app.Activity.MakeFriendActivity;import com.cqupt.personal.app.Activity.NewFriendActivity;import com.cqupt.personal.app.Bean.BecomeFriendDataBean;import com.cqupt.personal.app.CallBack.BecomeFriendCallback;import com.cqupt.personal.app.CallBack.MakeFriendCallback;import com.cqupt.personal.app.DIYView.MakeFriendDialog;import com.cqupt.personal.app.Adapter.MyFriendAdapter;import com.cqupt.personal.app.R;import com.cqupt.personal.app.StaticData;import java.util.ArrayList;import java.util.List;/** * 好友界面 */public class FriendFragment extends Fragment implements View.OnClickListener,MakeFriendCallback,BecomeFriendCallback{    private FloatingActionButton floatingActionButton;    private RelativeLayout relativeLayout;    private ImageView dot;    private RecyclerView recyclerView;    private MyFriendAdapter adapter;    private BecomeFriendDataBean dataBean;    private AVObject bFriend;    private AVQuery<AVObject> doingQuery;    private AVLiveQuery doingLiveQuery;    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_friend, container, false);        init(view);        StaticData.friendFragment = this;        startSubscribe();        return view;    }    private void startSubscribe() {        doingQuery = new AVQuery<>("becomeFriend");        doingQuery.whereEqualTo("state", "true");        //开启订阅        doingLiveQuery = AVLiveQuery.initWithQuery(doingQuery);        doingLiveQuery.setEventHandler(new AVLiveQueryEventHandler() {            @Override            public void onObjectCreated(AVObject avObject) {                // avObject 即为新添加的数据                Log.d("become", "onObjectCreated: " + avObject.toString());                AVQuery<AVObject> avQuery = new AVQuery<>("TodoFolder");                String from = String.valueOf(avObject.get("from"));                String to = String.valueOf(avObject.get("to"));                if(AVUser.getCurrentUser().getUsername().equals(from)){                    avQuery.whereEqualTo("account",to);                    avQuery.findInBackground(new FindCallback<AVObject>() {                        @Override                        public void done(List<AVObject> list, AVException e) {                            if(dataBean == null){                                dataBean = new BecomeFriendDataBean();                                dataBean.setAccount(new ArrayList<String>());                                dataBean.setSignature(new ArrayList<String>());                                dataBean.setHeadIcon(new ArrayList<String>());                            }                            if(list.size() != 0 && e == null){                                dataBean.getAccount().add(String.valueOf(list.get(0).get("account")));                                dataBean.getSignature().add(String.valueOf(list.get(0).get("signature")));                                dataBean.getHeadIcon().add(String.valueOf(list.get(0).get("headIcon")));                                AVUser.getCurrentUser().put("accountList",dataBean.getAccount());                                AVUser.getCurrentUser().put("signatureList",dataBean.getSignature());                                AVUser.getCurrentUser().put("headIconList",dataBean.getHeadIcon());                                AVUser.getCurrentUser().saveInBackground();                                Log.d("become", "done: " + dataBean.getAccount().toString());                                recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));                                adapter = new MyFriendAdapter(dataBean.getAccount(),dataBean.getSignature(),dataBean.getHeadIcon(),getActivity());                                recyclerView.setAdapter(adapter);                                setAdapterListener(dataBean);//                                adapter.notifyDataSetChanged();                            }                        }                    });                }else if(AVUser.getCurrentUser().getUsername().equals(to)){                    avQuery.whereEqualTo("account",from);                    avQuery.findInBackground(new FindCallback<AVObject>() {                        @Override                        public void done(List<AVObject> list, AVException e) {                            if(dataBean == null){                                dataBean = new BecomeFriendDataBean();                                dataBean.setAccount(new ArrayList<String>());                                dataBean.setSignature(new ArrayList<String>());                                dataBean.setHeadIcon(new ArrayList<String>());                            }                            if(list.size() != 0 && e == null){                                dataBean.getAccount().add(String.valueOf(list.get(0).get("account")));                                dataBean.getSignature().add(String.valueOf(list.get(0).get("signature")));                                dataBean.getHeadIcon().add(String.valueOf(list.get(0).get("headIcon")));                                Log.d("become", "done: " + dataBean.toString());                                AVUser.getCurrentUser().put("accountList",dataBean.getAccount());                                AVUser.getCurrentUser().put("signatureList",dataBean.getSignature());                                AVUser.getCurrentUser().put("headIconList",dataBean.getHeadIcon());                                AVUser.getCurrentUser().saveInBackground();                                adapter = new MyFriendAdapter(dataBean.getAccount(),dataBean.getSignature(),dataBean.getHeadIcon(),getActivity());                                recyclerView.setAdapter(adapter);                                setAdapterListener(dataBean);                            }                        }                    });                }            }        });        doingLiveQuery.subscribeInBackground(new AVLiveQuerySubscribeCallback() {            @Override            public void done(AVException e) {                if (null == e) {                    // 订阅成功                }else {                    Log.d("become", "done: " + e.toString());                }            }        });    }    private void init(View view) {        floatingActionButton = view.findViewById(R.id.floatButton);        floatingActionButton.setOnClickListener(this);        relativeLayout = view.findViewById(R.id.relative);        relativeLayout.setOnClickListener(this);        dot = view.findViewById(R.id.image_dot);        recyclerView = view.findViewById(R.id.recycler);        //首先判断表中是否有数据，有的话就先同步更新        if(AVUser.getCurrentUser().get("accountList") != null){            dataBean = new BecomeFriendDataBean();            dataBean.setAccount(new ArrayList<String>());            dataBean.setSignature(new ArrayList<String>());            dataBean.setHeadIcon(new ArrayList<String>());            dataBean.setAccount(AVUser.getCurrentUser().getList("accountList"));            dataBean.setSignature(AVUser.getCurrentUser().getList("signatureList"));            dataBean.setHeadIcon(AVUser.getCurrentUser().getList("headIconList"));            recyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));            adapter = new MyFriendAdapter(dataBean.getAccount(),dataBean.getSignature(),dataBean.getHeadIcon(),getActivity());            recyclerView.setAdapter(adapter);            setAdapterListener(dataBean);            Log.d("become" ,"init: " + dataBean.getAccount().toString());        }    }    //设置RecycleView的点击事件    public void setAdapterListener(final BecomeFriendDataBean dataBean){        adapter.setmOnItemClickListener(new MyFriendAdapter.OnItemClickListener() {            @Override            public void onItemClick(View view, int position) {                Intent intent = new Intent(getActivity(), MakeFriendActivity.class);                intent.putExtra("account",dataBean.getAccount().get(position));                intent.putExtra("headIcon",dataBean.getHeadIcon().get(position));                intent.putExtra("signature",dataBean.getSignature().get(position));                intent.putExtra("flag","true");                Log.d("become", "onItemClick: " + "点击事件触发了");                getActivity().startActivity(intent);            }        });    }    @Override    public void onClick(View view) {        switch (view.getId()){            case R.id.floatButton:                String text = "请输入您想要添加好友的用户名";                MakeFriendDialog myDialog = new MakeFriendDialog(getActivity(),R.style.Dialog,text,this);                myDialog.show();                Window dialogWindow = myDialog.getWindow();                WindowManager m = getActivity().getWindowManager();                Display d = m.getDefaultDisplay(); // 获取屏幕宽、高度                WindowManager.LayoutParams p = dialogWindow.getAttributes(); // 获取对话框当前的参数值                p.height = (int) (d.getHeight() * 0.3); // 高度设置为屏幕的0.3                p.width = (int) (d.getWidth() * 0.9); // 宽度设置为屏幕的0.9                dialogWindow.setAttributes(p);                break;            case R.id.relative:                dot.setVisibility(View.GONE);                Intent intent = new Intent(getActivity(), NewFriendActivity.class);                startActivity(intent);        }    }    @Override    public void makeFriend(AVObject avObject) {        if(AVUser.getCurrentUser().getUsername().equals(avObject.get("to"))) {            StaticData.avObject = avObject;            dot.setVisibility(View.VISIBLE);        }    }    @Override    public void becomeFriend(String from, String to) {        bFriend = new AVObject("becomeFriend");        bFriend.put("from", from);        bFriend.put("to",to);        bFriend.put("state","true");        bFriend.saveInBackground(new SaveCallback() {            @Override            public void done(AVException e) {                if (null == e) {                    // 保存成功                }else {                    Log.d("become", "done: " + e.toString());                }            }        });    }}